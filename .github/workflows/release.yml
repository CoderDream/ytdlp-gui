on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build:
    runs-on: ${{ matrix.os }}

    # Platforms to build on/for
    strategy:
      matrix:
        os: [windows-latest, macos-13]
        node-version: [20.18.0]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.12.2
      - if: github.ref_type == 'tag'
        id: getVersion
        uses: actions/github-script@v7.0.1
        env:
          REF_NAME: ${{ github.ref_name }}
        with:
          script: |
            const isVersion = /^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
            const id = process.env.REF_NAME && process.env.REF_NAME.split('v')[1] || process.env.REF_NAME
            core.setOutput("value", id);
            core.setOutput("ok", isVersion.test(id))
      - if: github.ref_type == 'tag' && steps.getVersion.outputs.ok
        name: set app version
        uses: jossef/action-set-json-field@v2.2
        with:
          file: package.json
          field: version
          value: ${{ steps.getVersion.outputs.value }}
      - name: Install dependencies
        run: |
          # yarn config set ignore-engines true
          pnpm i --frozen-lockfile

      - if: matrix.os == 'macos-13'
        name: rebuild deps for macos
        run: |
          # rebuild libsql deps for macos
          pnpm rebuild --config.platform=darwin --config.arch=arm64

      - name: Build Electron release
        run: |
          pnpm run release
        env:
          # MAIN_VITE_ANYSTACK_API_KEY: ${{ secrets.ANYSTACK_API_KEY }}
          # MAIN_VITE_ANYSTACK_PRODUCT_ID: ${{ secrets.ANYSTACK_PRODUCT_ID }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ACTION_RUNNER: ${{ matrix.os }}
          VITE_SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
          VITE_GITHUB_REPOSITORY: ${{ github.repository }}
      # - if: matrix.os == 'ubuntu-latest'
      #   name: Upload release source maps to sentry
      #   continue-on-error: true
      #   env:
      #     SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
      #     SENTRY_PROJECT: ytdlp-gui
      #     SENTRY_ORG: venipa.net
      #     SENTRY_DEPLOY_ENVIRONMENT: production
      #     SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      #     SENTRY_URL: ${{ secrets.SENTRY_URL }}
      #   run: |
      #     # Install Sentry CLI
      #     curl -sL https://sentry.io/get-cli/ | bash

      #     # Create new Sentry release
      #     export SENTRY_RELEASE=$(sentry-cli releases propose-version)
      #     sentry-cli releases new --project $SENTRY_PROJECT $SENTRY_RELEASE
      #     sentry-cli releases set-commits --auto $SENTRY_RELEASE
      #     sentry-cli releases finalize $SENTRY_RELEASE

      #     # Create new deploy for this Sentry release
      #     sentry-cli releases deploys $SENTRY_RELEASE new -e $SENTRY_DEPLOY_ENVIRONMENT
